# -*- coding: utf-8 -*-
"""Text_Extraction_from_Doc.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bm2Lx9dOBOAzLzFXY01Kh0jYvZKeVHqb
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install python-docx PyPDF2 filetype

import requests
from google.colab import drive
import os
import re

# Define the Google Drive file URL
google_drive_url = "https://drive.google.com/file/d/1bnkd3XAWgcOUCAAnCHrA6iAPuAzvmFJ5/view?usp=drivesdk"

# Extract the file ID from the URL using a regular expression
match = re.search(r'/d/([a-zA-Z0-9_-]+)', google_drive_url)
if match:
    file_id = match.group(1)
else:
    file_id = None
    print("Could not extract file ID from the URL.")

if file_id:
    # Construct the download URL for the file
    download_url = f'https://drive.google.com/uc?export=download&id={file_id}'

    # Send a GET request to the download URL with stream=True and allow_redirects=True
    response = requests.get(download_url, stream=True, allow_redirects=True)

    # Raise an HTTPError for bad responses (4xx or 5xx)
    response.raise_for_status()

    # Write the downloaded content to a local file in chunks
    with open('downloaded_file', 'wb') as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)

    print("File downloaded successfully.")
else:
    print("File download failed due to invalid URL.")

import filetype

kind = filetype.guess('downloaded_file')
if kind is not None:
    file_extension = kind.extension
    print(f"Identified file extension: {file_extension}")
else:
    print("Could not identify file type.")
    file_extension = None # Set to None if file type is not identified

import docx
import PyPDF2

extracted_text = ""

if file_extension == 'docx':
    try:
        doc = docx.Document('downloaded_file')
        for paragraph in doc.paragraphs:
            extracted_text += paragraph.text + '\n'
    except Exception as e:
        extracted_text = f"Error extracting text from DOCX: {e}"
elif file_extension == 'pdf':
    try:
        with open('downloaded_file', 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            for page_num in range(len(reader.pages)):
                extracted_text += reader.pages[page_num].extract_text() + '\n'
    except Exception as e:
        extracted_text = f"Error extracting text from PDF: {e}"
elif file_extension == 'txt':
    try:
        with open('downloaded_file', 'r') as file:
            extracted_text = file.read()
    except Exception as e:
        extracted_text = f"Error extracting text from TXT: {e}"
else:
    extracted_text = "Unsupported file type for text extraction."

print("Extracted Text:")
print(extracted_text)

import os

if os.path.exists('downloaded_file'):
    os.remove('downloaded_file')
    print("Downloaded file deleted.")
else:
    print("Downloaded file not found.")



import google.generativeai as genai
from google.colab import userdata
import json

# Access your API key from Colab's secrets manager
try:
    GOOGLE_API_KEY = userdata.get('GOOGLE_API_KEY')
    genai.configure(api_key=GOOGLE_API_KEY)
except Exception as e:
    print(f"Error configuring Gemini API: {e}")
    print("Please ensure you have added your Google API key to Colab's secrets manager named 'GOOGLE_API_KEY'")
    GOOGLE_API_KEY = None


if GOOGLE_API_KEY:
    try:
        # Initialize the Gemini model
        gemini_model = genai.GenerativeModel('gemini-2.5-flash-lite')

        # Define the prompt to request JSON output
        prompt = f"""
        Extract the key information from the following text and provide it as a structured JSON object.
        The JSON should include fields for:
        - Personal Information (Name, Address, Contact No., Email Id, GitHub, LinkedIn, Portfolio)
        - Professional Summary
        - Technical Competency (Languages, Backend & Databases, Core CS, Tools & Platforms, Other Skills, Other Interests)
        - Interpersonal Skills
        - Interests & Hobbies
        - Languages Known
        - Personal Details (Mother's Name, Father's Name, D.O.B)
        - Education (List of degrees/certifications with details like institution, years, score)
        - Projects & Training (List of projects/training with details like name, technologies, environment, team size)
        - Internship (List of internships with details like role, company, year)
        - Research & Patents (List of research/patents with details like name, filed date, role, co-inventors)
        - Certifications & Training (List of certifications/training with details like name, institution)

        Here is the text:
        {extracted_text}
        """

        # Generate content using the Gemini model
        response = gemini_model.generate_content(prompt)

        # Attempt to parse the response text as JSON
        try:
            structured_output = json.loads(response.text)
            print("Structured JSON Output:")
            print(json.dumps(structured_output, indent=2))
        except json.JSONDecodeError as e:
            print(f"Error decoding JSON from model response: {e}")
            print("Model response text:")
            print(response.text)

    except Exception as e:
        print(f"Error generating content with Gemini API: {e}")
else:
    print("Cannot proceed without a valid Google API Key.")

